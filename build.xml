<?xml version="1.0"?>

<!--
  ~ @package   panopticon
  ~ @copyright Copyright (c)2023-2023 Nicholas K. Dionysopoulos / Akeeba Ltd
  ~ @license   https://www.gnu.org/licenses/agpl-3.0.txt GNU Affero General Public License, version 3 or later
  -->

<project name="panopticon" description="Akeeba Panopticon Connector" default="git">
    <import file="${phing.dir}/../buildfiles/phing/common.xml"/>

    <!-- Override properties set up in common.xml -->
    <property name="dirs.root" value="${phing.dir}" override="true" />
    <property name="dirs.release" value="${dirs.root}/release" override="true" />
    <property name="dirs.templates" value="${phing.dir}/build/templates" override="true" />
    <property name="dirs.component" value="${phing.dir}/component" override="true" />
    <property name="dirs.modules" value="${phing.dir}/modules" override="true" />
    <property name="dirs.plugins" value="${phing.dir}/plugins" override="true" />
    <property name="dirs.documentation" value="${phing.dir}/documentation" override="true" />

    <!-- Load externally defined properties -->
    <property file="${phing.dir.common}/default.properties" override="true" />
    <property file="${phing.dir}/../build.properties" override="true" />
    <property file="${phing.dir}/../build.${host.os}.properties" override="true" />
    <property file="${phing.dir}/build/build.properties" override="true" />
    <property file="${phing.dir}/build/override.properties" override="true" />
    <property file="${phing.dir}/build.properties" override="true" />
    <property file="${phing.dir}/override.properties" override="true" />

    <!--
    ====================================================================================================
    File sets
    ====================================================================================================
    -->
    <fileset dir="${dirs.component}" id="component" expandsymboliclinks="true">
        <include name="api/**"/>
        <include name="backend/**"/>
        <include name="*"/>

        <exclude name="LICENSE.txt"/>
        <exclude name="script.panopticon.php"/>
    </fileset>

    <fileset dir="${dirs.release}" id="package">
        <include name="com_*.zip"/>
        <include name="plg_webservices*.zip"/>
        <include name="pkg_*.xml"/>
        <include name="language/**"/>
        <include name="*.txt"/>
        <include name="script.*.php"/>
    </fileset>

    <!--
    ====================================================================================================
    Tasks - General
    ====================================================================================================
    -->
    <target name="git" description="Makes only packages, not the documentation"
            depends="new-release,setup-properties,component-packages,update_xml">
    </target>

    <target name="new-release" depends="composer-install,link">
        <echo>Emptying release directory</echo>
        <delete dir="${dirs.release}" quiet="true" includeemptydirs="true"/>
        <mkdir dir="${dirs.release}"/>

        <echo>Removing .DS_Store files</echo>
        <exec command="sh killDS.sh" dir="${dirs.root}"/>
    </target>

    <target name="setup-properties" description="Set up version and build properties">
        <!-- Initialize the build.date timestamp -->
        <tstamp>
            <format property="build.date" pattern="%Y-%m-%d"/>
        </tstamp>

        <!-- Initialize the version if it's not set -->
        <if>
            <equals arg1="${version}" arg2="git" />
            <then>
                <autoversion workingCopy="${dirs.root}" propertyName="version" />
            </then>
        </if>

        <filterchain id="standard-tokens">
            <replacetokens begintoken="##" endtoken="##">
                <token key="DATE" value="${build.date}"/>
                <token key="VERSION" value="${version}"/>
                <token key="PRO" value="1"/>
            </replacetokens>
        </filterchain>

    </target>

    <!--
    ====================================================================================================
    Tasks - Updates
    ====================================================================================================
    -->
    <target name="update_xml">
        <if>
            <not>
                <contains string="${version}" substring="-dev" />
            </not>
            <then>
                <!-- Package name: pkg_something-1.2.3.zip -->
                <property name="build.package_name" value="pkg_${build.package_base_name}-${version}.zip" />

                <!-- Generate the file hashes -->
                <filehash file="${dirs.release}/${build.package_name}" algorithm="md5" propertyname="buildhash.md5" />
                <filehash file="${dirs.release}/${build.package_name}" algorithm="sha1" propertyname="buildhash.sha1" />
                <filehash file="${dirs.release}/${build.package_name}" algorithm="sha256" propertyname="buildhash.sha256" />
                <filehash file="${dirs.release}/${build.package_name}" algorithm="sha384" propertyname="buildhash.sha384" />
                <filehash file="${dirs.release}/${build.package_name}" algorithm="sha512" propertyname="buildhash.sha512" />

                <!-- Create the XML representation of the current version's update information -->
                <loadfile file="${dirs.templates}/update.xml" property="update.current">
                    <filterchain id="updatefile-tokens">
                        <replacetokens begintoken="##" endtoken="##">
                            <token key="DATE" value="${build.date}" />
                            <token key="VERSION" value="${version}" />
                            <token key="HASH_MD5" value="${buildhash.md5}" />
                            <token key="HASH_SHA1" value="${buildhash.sha1}" />
                            <token key="HASH_SHA256" value="${buildhash.sha256}" />
                            <token key="HASH_SHA384" value="${buildhash.sha384}" />
                            <token key="HASH_SHA512" value="${buildhash.sha512}" />
                        </replacetokens>
                    </filterchain>
                </loadfile>

                <!-- Add the current version as the first update item -->
                <loadfile file="${dirs.root}/updates/pkg_panopticon.xml" property="update.all">
                    <filterchain>
                        <replaceregexp>
                            <regexp pattern="&lt;updates&gt;" replace="&lt;updates&gt;${update.current}" ignoreCase="false" />
                        </replaceregexp>
                    </filterchain>
                </loadfile>

                <!-- Remove duplicates and save the mostly minified file to the repo -->
                <xmlupdate xml="${update.all}" tofile="${dirs.root}/updates/pkg_panopticon.xml" />

                <!-- Upload the update XML file to S3 as well -->
                <exec command="s3cmd put ${dirs.root}/updates/pkg_panopticon.xml s3://${s3.bucket}/updates/pkg_panopticon.xml --acl-public --add-header='Cache-Control:max-age=300'" passthru="true"/>
            </then>
        </if>
    </target>

    <!--
    ====================================================================================================
    Tasks - Documentation
    ====================================================================================================
    -->

    <target name="documentation" description="Creates the documentation packages">
        <echo>No documentation for the connector itself.</echo>
    </target>
</project>